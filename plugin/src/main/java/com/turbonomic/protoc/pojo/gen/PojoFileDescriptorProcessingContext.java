/*
 * Copyright (C) 2009 - 2022 Turbonomic, Inc.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 */
package com.turbonomic.protoc.pojo.gen;

import java.util.Objects;

import javax.annotation.Generated;
import javax.annotation.Nonnull;
import javax.lang.model.element.Modifier;

import com.google.protobuf.DescriptorProtos.DescriptorProto;
import com.google.protobuf.DescriptorProtos.FileDescriptorProto;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import com.turbonomic.protoc.plugin.common.generator.AbstractDescriptor;
import com.turbonomic.protoc.plugin.common.generator.FileDescriptorProcessingContext;
import com.turbonomic.protoc.plugin.common.generator.MessageDescriptor;
import com.turbonomic.protoc.plugin.common.generator.Registry;

/**
 * {@link FileDescriptorProcessingContext} for generating pojo's.
 */
public class PojoFileDescriptorProcessingContext extends FileDescriptorProcessingContext {

    @Nonnull final PojoCodeGenerator codeGen;

    private final IntoProtoInterfaceGenerator intoProtoGenerator;

    /**
     * Create a {@link PojoFileDescriptorProcessingContext}.
     *
     * @param generator The generator.
     * @param registry The registry.
     * @param fileDescriptorProto The proto file descriptor.
     * @param intoProtoGenerator Generator for the into proto interface.
     */
    public PojoFileDescriptorProcessingContext(@Nonnull PojoCodeGenerator generator,
                                               @Nonnull Registry registry,
                                               @Nonnull FileDescriptorProto fileDescriptorProto,
                                               @Nonnull IntoProtoInterfaceGenerator intoProtoGenerator) {
        super(generator, registry, fileDescriptorProto, new PojoTypeNameFormatter());
        this.codeGen = Objects.requireNonNull(generator);
        this.intoProtoGenerator = Objects.requireNonNull(intoProtoGenerator);
    }

    @Nonnull
    @Override
    protected String generateFileContents() {
        final AnnotationSpec generatedAnnotation = AnnotationSpec.builder(Generated.class)
            .addMember("value", "\"by $L compiler plugin\"", generator.getPluginName())
            .addMember("comments", "\"Source: $L\"", fileDescriptorProto.getName())
            .build();

        final TypeSpec.Builder outerClass = TypeSpec.classBuilder(getOuterClass().getPluginJavaClass())
            .addModifiers(Modifier.PUBLIC)
            .addAnnotation(generatedAnnotation);

        MethodSpec constructor = MethodSpec.constructorBuilder()
            .addModifiers(Modifier.PRIVATE)
            .addJavadoc("Private constructor for outer containing class to prevent construction.")
            .build();
        outerClass.addMethod(constructor);

        for (final DescriptorProto proto : fileDescriptorProto.getMessageTypeList()) {
            final AbstractDescriptor descriptor = registry.getMessageDescriptor(
                typeNameFormatter.formatTypeName(proto.getName()));
            if (descriptor instanceof MessageDescriptor) {
                final MessageDescriptor msgDescriptor = (MessageDescriptor)descriptor;
                codeGen.generateTypesForMessage(msgDescriptor)
                    .forEach(type -> outerClass.addType(type.build()));
            }
        }

        final JavaFile file = JavaFile.builder(getJavaPackage(), outerClass.build())
            .addFileComment("Generated by the $L compiler plugin. DO NOT EDIT!\n"
                + "source: $L", generator.getPluginName(), fileDescriptorProto.getName())
            .build();

        return file.toString();
    }
}
